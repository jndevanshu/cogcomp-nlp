package edu.illinois.cs.cogcomp.ner.LbjFeatures;

import java.util.*;

import edu.illinois.cs.cogcomp.ner.LbjTagger.NEWord;
import edu.illinois.cs.cogcomp.ner.LanguageSpecificNormalizer;
import edu.illinois.cs.cogcomp.ner.ExpressiveFeatures.WordTopicAndLayoutFeatures;
import edu.illinois.cs.cogcomp.ner.ExpressiveFeatures.BrownClusters;
import edu.illinois.cs.cogcomp.ner.ExpressiveFeatures.Gazetteers;
import edu.illinois.cs.cogcomp.ner.ExpressiveFeatures.WordEmbeddings;
import edu.illinois.cs.cogcomp.ner.LbjTagger.ParametersForLbjCode;
import edu.illinois.cs.cogcomp.ner.StringStatisticsUtils.*;
import edu.illinois.cs.cogcomp.ner.WordEmbedding;


discrete% distanceFromEntity(NEWord word) <-
{
    int d = word.getEntDist();
    sense "" + d;
}

discrete% Frequency(NEWord word) <-
{
    double d = word.getFreq();

    for(double i = 0; i < 1.0; i += 0.1){
       double i1 = i + 0.1;
       if(d > i && d <= i1){
            sense i + "-" + i1;
       }
    }
}


// Feature set ii
discrete{false, true}% WordTypeInformation(NEWord word) <-
{
	    boolean allCapitalized = true, allDigits = true, allNonLetters = true;
	
	    for (int j = 0; j < word.form.length(); ++j) {
	    	char c = word.form.charAt(j);
	      	allDigits &= (Character.isDigit(c)||c=='.'||c==',');
	      	allNonLetters &= !Character.isLetter(c);
	    }
	    sense "d" : allDigits;
	    sense "p" : allNonLetters;

}

discrete NELabel(NEWord word) <- { return word.neLabel; }

discrete OnonOtagger(NEWord word)  <-
learn NELabel
  using WordTypeInformation,Frequency,distanceFromEntity
  with new SparseNetworkLearner(new WeightedSparseAveragedPerceptron(0.1, 0, 10))
  progressOutput 10000
end
